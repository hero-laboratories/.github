name: Deploy to Amazon ECS

on:
  workflow_call:
    inputs:
      VERSION:
        required: true
        type: string
      DOCKER_BUILD_OPTIONS:
        required: false
        type: string
        default: ""
      AWS_REGION:
        required: true
        type: string
      ECR_REPOSITORY:
        required: true
        type: string
      ECS_SERVICE:
        required: true
        type: string
      ECS_CLUSTER:
        required: true
        type: string
      ECS_TASK_DEFINITION:
        required: true
        type: string
      CONTAINER_NAME:
        required: true
        type: string
      SLACK_CHANNEL:
        required: true
        type: string
      SLACK_TITLE:
        required: true
        type: string
      SLACK_MESSAGE:
        required: true
        type: string
      ENVIRONMENT:
        required: false
        type: string
      WORKFLOW_SKIP_CHECKOUT:
        required: false
        type: string
      WORKFLOW_USE_ARTIFACTS:
        required: false
        type: string
      WORKFLOW_USE_ENV:
        required: false
        type: string
      DEBUG_S3_BUCKET:
        required: false
        type: string

    secrets:
      AWS_ACCESS_KEY:
        required: true
      AWS_SECRET_KEY:
        required: true
      DOCKER_BUILD_OPTIONS_SECRET:
        required: false

      # https://api.slack.com/apps/A03D6DJ3UD9/incoming-webhooks?
      SLACK_WEBHOOK:
        required: true

      GOOGLE_CHAT_WEBHOOK:
        required: false

      HL_GITHUB_TOKEN:
        required: false

      SECRET_ENVIRONMENT:
        required: false

jobs:

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v3 
        if: ${{ env.HL_GITHUB_TOKEN != '' && env.WORKFLOW_SKIP_CHECKOUT == '' }}
        env:
          HL_GITHUB_TOKEN: ${{ secrets.HL_GITHUB_TOKEN }}
          WORKFLOW_SKIP_CHECKOUT: ${{ inputs.WORKFLOW_SKIP_CHECKOUT }}
        with:
          ref: ${{ inputs.VERSION }}
          token: ${{ secrets.HL_GITHUB_TOKEN }}
          submodules: recursive

      - name: Checkout without submodules 
        uses: actions/checkout@v3 
        if: ${{ env.HL_GITHUB_TOKEN == '' && env.WORKFLOW_SKIP_CHECKOUT == '' }}
        env:
          HL_GITHUB_TOKEN: ${{ secrets.HL_GITHUB_TOKEN }}
          WORKFLOW_SKIP_CHECKOUT: ${{ inputs.WORKFLOW_SKIP_CHECKOUT }}
        with:
          ref: ${{ inputs.VERSION }}
      
      # Download artifacts if needed
      - name: Retrieve artifact
        uses: actions/download-artifact@v2
        if: ${{ env.WORKFLOW_USE_ARTIFACTS == 'true' }}
        env:
          WORKFLOW_USE_ARTIFACTS: ${{ inputs.WORKFLOW_USE_ARTIFACTS }}
        with:
          name: artifact
          path: artifacts

      # https://github.com/marketplace/actions/install-aws-cli-action
      - name: install-aws-cli
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@master

      - run: aws --version
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Debug variables and secrets
        if: ${{ env.DEBUG_S3_BUCKET != '' }}
        env:
          DEBUG_S3_BUCKET: ${{ inputs.DEBUG_S3_BUCKET }}
        shell: bash
        run: |
          echo ${{ inputs.ENVIRONMENT }} > build_env_pre
          echo ${{ secrets.SECRET_ENVIRONMENT }} >> build_env_pre
          echo ${{ inputs.DOCKER_BUILD_OPTIONS }} >> build_env_pre
          echo ${{ secrets.DOCKER_BUILD_OPTIONS_SECRET }} >> build_env_pre
          aws --region=${{ inputs.AWS_REGION }} s3 cp build_env_pre s3://${{ env.DEBUG_S3_BUCKET }}/debug/${{ github.sha }}-build_env_pre.txt

        # https://github.com/aws-actions/amazon-ecr-login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push docker container if this container does not exist (with .build_env)
        timeout-minutes: 10
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        shell: bash
        if: ${{ inputs.WORKFLOW_USE_ENV != '' }}
        run: |
          # Load env variables before building docker image
          for i in $(cat .build_env_pre); do echo "export $i" >> .build_env ; done
          echo "Building dockerfile:"
          # Docker build image
          if docker manifest inspect  ${{ env.ECR_REGISTRY }}/${{ inputs.ECR_REPOSITORY }}:${{ inputs.VERSION }} ; then 
            echo "Container ${{ env.ECR_REGISTRY }}/${{ inputs.ECR_REPOSITORY }}:${{ inputs.VERSION }} exists"
          else 
            docker build \
            --build-arg VERSION=${{ inputs.VERSION }} \
            --tag ${{ env.ECR_REGISTRY }}/${{ inputs.ECR_REPOSITORY }}:${{ inputs.VERSION }} \
            --tag ${{ env.ECR_REGISTRY }}/${{ inputs.ECR_REPOSITORY }}:latest \
            . ${{ inputs.DOCKER_BUILD_OPTIONS }} ${{ secrets.DOCKER_BUILD_OPTIONS_SECRET }}
            docker push --all-tags ${{ env.ECR_REGISTRY }}/${{ inputs.ECR_REPOSITORY }}
          fi

      - name: Build and push docker container if this container does not exist (without .build_env)
        timeout-minutes: 10
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        shell: bash
        if: ${{ inputs.WORKFLOW_USE_ENV == '' }}
        run: |
          echo "Building dockerfile:"
          # Docker build image
          if docker manifest inspect  ${{ env.ECR_REGISTRY }}/${{ inputs.ECR_REPOSITORY }}:${{ inputs.VERSION }} ; then 
            echo "Container ${{ env.ECR_REGISTRY }}/${{ inputs.ECR_REPOSITORY }}:${{ inputs.VERSION }} exists"
          else 
            docker build \
            --build-arg VERSION=${{ inputs.VERSION }} \
            --tag ${{ env.ECR_REGISTRY }}/${{ inputs.ECR_REPOSITORY }}:${{ inputs.VERSION }} \
            --tag ${{ env.ECR_REGISTRY }}/${{ inputs.ECR_REPOSITORY }}:latest \
            . ${{ inputs.DOCKER_BUILD_OPTIONS }} ${{ secrets.DOCKER_BUILD_OPTIONS_SECRET }}
            docker push --all-tags ${{ env.ECR_REGISTRY }}/${{ inputs.ECR_REPOSITORY }}
          fi
          
      # https://github.com/aws-actions/amazon-ecs-render-task-definition
      - name: Fill in the new image ID in the Amazon ECS task definition
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ inputs.ECS_TASK_DEFINITION }}
          container-name: ${{ inputs.CONTAINER_NAME }}
          image: ${{ env.ECR_REGISTRY }}/${{ inputs.ECR_REPOSITORY }}:${{ inputs.VERSION }}
          environment-variables: |
            ${{ secrets.SECRET_ENVIRONMENT }}
            ${{ inputs.ENVIRONMENT }}

      # https://github.com/aws-actions/amazon-ecs-deploy-task-definition
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        timeout-minutes: 8
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.ECS_SERVICE }}
          cluster: ${{ inputs.ECS_CLUSTER }}
          wait-for-service-stability: true

      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#environment-files
      - name: Reciving ECS task status
        id: set_var
        run: |
          content=`aws --region eu-west-2 ecs describe-services --services ${{ inputs.ECS_SERVICE }} --cluster ${{ inputs.ECS_CLUSTER }}`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=packageJson::$content"
      - name: Checking ECS task status
        id: status
        run: |
          if [ "${{fromJson(steps.set_var.outputs.packageJson).services[0].runningCount }}" != "1" ]; then echo "SLACK_COLOR=#db1251" >> $GITHUB_ENV ; else echo "SLACK_COLOR=#039c27" >> $GITHUB_ENV ; fi
      - name: Setting color for slack
        run: |
          echo "${{ env.SLACK_COLOR }}"

      # Skack notification if everything is good
      # https://github.com/marketplace/actions/slack-notify
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: ${{ inputs.SLACK_CHANNEL }}
          SLACK_COLOR: "#039c27" 
          SLACK_TITLE: ${{ inputs.SLACK_TITLE }}
          SLACK_USERNAME: bot
          SLACK_MESSAGE: ""
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          MSG_MINIMAL: Actions URL, Commit

      # Skack notification if something is bad
      # https://github.com/marketplace/actions/slack-notify
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: ${{ failure() }}
        env:
          SLACK_CHANNEL: ${{ inputs.SLACK_CHANNEL }}
          SLACK_COLOR: "#db1251" 
          SLACK_TITLE: ${{ inputs.SLACK_TITLE }}
          SLACK_USERNAME: bot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: ""
          MSG_MINIMAL: Actions URL, Commit

      # Google Chat Notification
      # https://github.com/marketplace/actions/google-chat-notification
      - name: Google Chat Notification
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: ${{ inputs.SLACK_TITLE }}
          url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          status: ${{ job.status }}
        if: always()
