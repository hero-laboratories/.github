name: Deploy to Amazon ECS

on:
  workflow_call:
    inputs:
      AWS_REGION:
        required: true
        type: string
      ECR_REPOSITORY:
        required: true
        type: string
      ECS_SERVICE:
        required: true
        type: string
      ECS_CLUSTER:
        required: true
        type: string
      ECS_TASK_DEFINITION:
        required: true
        type: string
      CONTAINER_NAME:
        required: true
        type: string
      SLACK_CHANNEL:
        required: true
        type: string
      SLACK_TITLE:
        required: true
        type: string

    secrets:
      AWS_ACCESS_KEY:
        required: true
      AWS_SECRET_KEY:
        required: true

      # https://api.slack.com/apps/A03D6DJ3UD9/incoming-webhooks?
      SLACK_WEBHOOK:
        required: true

jobs:

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: stage

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      # https://github.com/marketplace/actions/install-aws-cli-action
      - name: install-aws-cli
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@master

      - run: aws --version
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}

        # https://github.com/aws-actions/amazon-ecr-login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push docker container if this container is not exists
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          if docker manifest inspect  ${ECR_REGISTRY}/admin-dashboard:${{ github.sha }} ; then 
            echo "Container ${ECR_REGISTRY}/admin-dashboard:${{ github.sha }} exists"
          else 
            docker build . -t ${ECR_REGISTRY}/admin-dashboard:${{ github.sha }}
            docker push ${ECR_REGISTRY}/admin-dashboard:${{ github.sha }}
          fi
          
      # https://github.com/aws-actions/amazon-ecs-render-task-definition
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ inputs.ECS_TASK_DEFINITION }}
          container-name: ${{ inputs.CONTAINER_NAME }}
          image: ${{ inputs.ECR_REPOSITORY }}:${{ github.sha }}

      # https://github.com/aws-actions/amazon-ecs-deploy-task-definition
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.ECS_SERVICE }}
          cluster: ${{ inputs.ECS_CLUSTER }}
          wait-for-service-stability: true

      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#environment-files
      - name: Reciving ECS task status
        id: set_var
        run: |
          content=`aws --region eu-west-2 ecs describe-services --services ${{ inputs.ECS_SERVICE }} --cluster ${{ inputs.ECS_CLUSTER }}`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=packageJson::$content"
      - name: Checking ECS task status
        id: status
        run: |
          if [ "${{fromJson(steps.set_var.outputs.packageJson).services[0].runningCount }}" != "1" ]; then echo "SLACK_COLOR=#db1251" >> $GITHUB_ENV ; else echo "SLACK_COLOR=#039c27" >> $GITHUB_ENV ; fi
      - name: Setting color for slack
        run: |
          echo "${{ env.SLACK_COLOR }}"
      - name: Setting message for Slakc
        run: |
          echo "GIT_MESSAGE=`git log -1 --pretty="%B"`" >> $GITHUB_ENV

        # https://github.com/marketplace/actions/slack-notify
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: ${{ inputs.SLACK_CHANNEL }}
          SLACK_COLOR: ${{ env.SLACK_COLOR }} # or a specific color like 'good' or '#db1251', #039c27
          SLACK_MESSAGE: ${{ env.GIT_MESSAGE }}
          SLACK_TITLE: ${{ inputs.SLACK_TITLE }}
          SLACK_USERNAME: bot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
