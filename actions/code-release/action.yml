name: "Perform a code test"
description: "Installing dependencies and running tests"

inputs:
   token:
     description: "Token needed to access files "
     required: true
   path-to-json:
     description: "Path to json folder with version"
     required: true
   repository-name:
     description: "Name of repository needed to create code packages"
     required: true
   repository-type:
     description: "Repository type used in bash code"
     required: true
   staging-bucket:
     description: "Staging s3 bucket name"
     required: true
   production-bucket:
     description: "Production s3 bucket name"
     required: true
   access-key-staging:
     description: "AWS staging key"
     required: true
   secret-key-staging:
     description: "AWS secret key staging"
     required: true
   access-key-production:
     description: "AWS production key"
     required: true
   secret-key-production:
     description: "AWS production secret key"
     required: true
   source-directory:
     description: "Name of repository needed to create code packages"
     required: true
   exclude-files:
     description: "List of folders/files excluded in the release"
     required: false
   included-files:
     description: "List of folders/files included in the release"
     required: false
   nested-folder:
     description: "Folder name if files are nested"
     required: false
   s3-layer-folder:
     description: "S3 layers folder"
     required: false

runs:
   using: "composite"
   steps:
      - name: Read verion number from json file
        id: version
        uses: notiz-dev/github-action-json-property@release
        with: 
           path: '${{inputs.path-to-json}}'
           prop_path: 'version'
      - name: Install NPM dependencies and create folder with files used in subsequent steps
        shell: bash
        run: | 
          if [[ "${{inputs.repository-type}}" = "typescript" ]]; then
            if [ -n "${{inputs.nested-folder}}" ]; then
                 cd ${{inputs.nested-folder}}
                 fi
            if [ -n "${{inputs.exclude-files}}" ]; then
                 npm install
                 rsync -arv ${{inputs.exclude-files}} . ./${{inputs.source-directory}}
                 fi
            if [ -n "${{inputs.included-files}}" ]; then
                 npm install
                 tsc
                 rsync -arv ${{inputs.included-files}} ./${{inputs.source-directory}}
                 fi
            exit 0
          elif [[ "${{inputs.repository-type}}" = "python" ]]; then
            if [ -n "${{inputs.nested-folder}}" ]; then
                 cd ${{inputs.nested-folder}}
                 fi
            rsync -arv ${{inputs.exclude-files}} . ./relesae
            exit 0
          elif [[ ${{inputs.repository-type}} = "layer" ]]; then
            exit 0
          else
            exit 1
          fi
      - name: Archive files for S3 package
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          directory: ./${{inputs.source-directory}}
          filename: '${{inputs.repository-name}}-${{steps.version.outputs.prop}}.zip'
      - name: Creat txt file with version number for S3 package
        shell: bash
        run: |
          cd ${{inputs.source-directory}}
          touch ${{inputs.repository-name}}-version.txt
          echo "${{steps.version.outputs.prop}}" >> ${{inputs.repository-name}}-version.txt
      - name: Upload code under Release tag
        uses: ncipollo/release-action@v1
        with:
          tag: ${{steps.version.outputs.prop}}
          body: ${{ github.event.head_commit.message }}
          artifacts: ${{inputs.source-directory}}/${{inputs.repository-name}}-${{steps.version.outputs.prop}}.zip
          token: ${{ inputs.token }}
      - name: Send zip file to S3 staging
        uses: jakejarvis/s3-sync-action@master
        with:
          args:  --delete --exclude '*' --include ${{inputs.repository-name}}-${{steps.version.outputs.prop}}.zip --include ${{inputs.repository-name}}-version.txt
        env:
          AWS_S3_BUCKET: ${{inputs.staging-bucket}}
          AWS_ACCESS_KEY_ID: ${{inputs.access-key-staging}}
          AWS_SECRET_ACCESS_KEY: ${{inputs.secret-key-staging}}
          SOURCE_DIR: './${{inputs.source-directory}}'
          DEST_DIR: '${{inputs.s3-layer-folder}}'
      - name: Send zip file to S3 production
        uses: jakejarvis/s3-sync-action@master
        with:
          args:  --delete --exclude '*' --include ${{inputs.repository-name}}-${{steps.version.outputs.prop}}.zip
        env:
          AWS_S3_BUCKET: ${{inputs.production-bucket}}
          AWS_ACCESS_KEY_ID: ${{inputs.access-key-production}}
          AWS_SECRET_ACCESS_KEY: ${{inputs.secret-key-production}}
          SOURCE_DIR: './${{inputs.source-directory}}'
          DEST_DIR: '${{inputs.s3-layer-folder}}'
